import os
import numpy as np
import matplotlib.pyplot as plt
import cv2
from google.colab.patches import cv2_imshow
from scipy.spatial import distance as dist


def rotate_bound(image, angle): 
    (h, w) = image.shape[:2]
    (cX, cY) = (w / 2, h / 2)

    M = cv2.getRotationMatrix2D((cX, cY), -angle, 1.0)
    cos = np.abs(M[0, 0])
    sin = np.abs(M[0, 1])

    nW = int((h * sin) + (w * cos))
    nH = int((h * cos) + (w * sin))

    M[0, 2] += (nW / 2) - cX
    M[1, 2] += (nH / 2) - cY

    return cv2.warpAffine(image, M, (nW, nH))

###############################################################################

    
def resize(image, width=None, height=None, inter=cv2.INTER_AREA): 

    dim = None
    (h, w) = image.shape[:2]

    if width is None and height is None:
        return image

    if width is None:
        r = height / float(h) 
        dim = (int(w * r), height)
       
    else:
        r = width / float(w) 
        dim = (width, int(h * r))

    resized = cv2.resize(image, dim, interpolation=inter) 

    return resized

###############################################################################


def order_points(pts):
    xSorted = pts[np.argsort(pts[:, 0]), :]

    leftMost = xSorted[:2, :] 
    rightMost = xSorted[2:, :]

    leftMost = leftMost[np.argsort(leftMost[:, 1]), :] 
    (tl, bl) = leftMost

    D = dist.cdist(tl[np.newaxis], rightMost, "euclidean")[0] 
    (br, tr) = rightMost[np.argsort(D)[::-1], :] 

    return np.array([tl, tr, br, bl], dtype="float32")  

###############################################################################

def four_point_transform(image, pts):
    
    rect = order_points(pts) 
    (tl, tr, br, bl) = rect

    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2)) 
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth = max(int(widthA), int(widthB))

    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight = max(int(heightA), int(heightB))

    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")

    M = cv2.getPerspectiveTransform(rect, dst) 
    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))

    return warped

###############################################################################    

path = '/content/drive/My Drive/chest images/2.2.jpeg'
#path="/content/drive/My Drive/misc/hip1.jpeg"
image = cv2.imread(path)

cv2.waitKey(0)
ratio = image.shape[0] / 500.0
orig = image.copy()
image = resize(image, height = 500)
 

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray = cv2.GaussianBlur(gray, (5, 5), 0)
sigma,mu = cv2.meanStdDev(gray)
edged = cv2.Canny(gray, sigma-mu, sigma+mu)
 
cnts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
cnts=cnts[0]


for c in cnts:

    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        
cv2.drawContours(image, [approx], -1, (0, 255, 0), 2)
cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()
fail=0
try:
  warped = four_point_transform(orig, approx.reshape(4, 2) * ratio)
  warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)
  cv2_imshow(warped)
  #using saved model
  os.chdir("/content/drive/My Drive/method1")
  with open('model.json', 'r') as f:
      model = model_from_json(f.read())
  # Load weights into the new model
  model.load_weights('model2.h5')
  dim=(100,100)
  resized = cv2.resize(warped, dim, interpolation=cv2.INTER_AREA)
  #resized = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)
  print(resized.shape) 
  resizedcpy=resized
  resized = resized.reshape(1,100,100,1)
  results=model.predict(resized)
  df = pd.DataFrame(results)
  print(results)
  resultslin=(df.idxmax(axis=1))
  #print(resultslin.iloc[0])
  angles=[0,180,270,90]
  angle=angles[resultslin.iloc[0]]
  print(angle)
  rotated=rotate_bound(warped,-angle)
  cv2_imshow(rotated)
except:
  print("failed to detect rectangle,reload image")
